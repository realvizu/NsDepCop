<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SoftwareApproach.TestingExtensions</name>
    </assembly>
    <members>
        <member name="T:SoftwareApproach.TestingExtensions.ExtensionMethods">
            <summary>
            Provides a set of extension methods to facilitate readable testing assertions.
            </summary>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Int16,System.Int16)">
            <summary>
            Asserts that this short value is greater than a certain value.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="comparer">The <i>short</i> to compare to.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that this short value is greater than a certain value.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="comparer">The <i>short</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Asserts that this short value is greater than a certain value.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="comparer">The <i>short</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Int16,System.Int16)">
            <summary>
            Asserts that this short value is greater than or equal to a certain value.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="comparer">The <i>short</i> to compare to.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that this short value is greater than or equal to a certain value.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="comparer">The <i>short</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Asserts that this short value is greater than or equal to a certain value.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="comparer">The <i>short</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Int16,System.Int16)">
            <summary>
            Asserts that this short value is less than a certain value.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="comparer">The <i>short</i> to compare to.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that this short value is less than a certain value.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="comparer">The <i>short</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Asserts that this short value is less than a certain value.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="comparer">The <i>short</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Int16,System.Int16)">
            <summary>
            Asserts that this short value is less than or equal to a certain value.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="comparer">The <i>short</i> to compare to.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that this short value is less than or equal to a certain value.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="comparer">The <i>short</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Asserts that this short value is less than or equal to a certain value.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="comparer">The <i>short</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Int16,System.Int16,System.Int16)">
            <summary>
            Asserts that this short value is between two values.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>short</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>short</i> to be less than or equal to.</param>
            <returns>The original <i>short</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that this short value is between two values.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>short</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>short</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>short</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Int16,System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Asserts that this short value is between two values.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>short</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>short</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>short</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Int16,System.Int16,System.Int16)">
            <summary>
            Asserts that this short value is between two values.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>short</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>short</i> to be greater than.</param>
            <returns>The original <i>short</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Asserts that this short value is between two values.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>short</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>short</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>short</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Int16,System.Int16,System.Int16,System.String,System.Object[])">
            <summary>
            Asserts that this short value is between two values.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>short</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>short</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>short</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Int16)">
            <summary>
            Asserts that this short value is positive or zero.
            </summary>
            <param name="source">The short value to test.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Int16,System.String)">
            <summary>
            Asserts that this short value is positive or zero.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Int16,System.String,System.Object[])">
            <summary>
            Asserts that this short value is positive or zero.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Int16)">
            <summary>
            Asserts that this short value is negative.
            </summary>
            <param name="source">The short value to test.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Int16,System.String)">
            <summary>
            Asserts that this short value is negative.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Int16,System.String,System.Object[])">
            <summary>
            Asserts that this short value is negative.
            </summary>
            <param name="source">The short value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>short</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBefore(System.DateTime,System.DateTime)">
            <summary>
            Asserts that this DateTime value is before the specified DateTime value.
            </summary>
            <param name="source">The <i>DateTime</i> value to test.</param>
            <param name="comparer">The <i>DateTime</i> to compare to.</param>
            <returns>The original <i>DateTime</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBefore(System.DateTime,System.DateTime,System.String)">
            <summary>
            Asserts that this DateTime value is before the specified DateTime value.
            </summary>
            <param name="source">The <i>DateTime</i> value to test.</param>
            <param name="comparer">The <i>DateTime</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>DateTime</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBefore(System.DateTime,System.DateTime,System.String,System.Object[])">
            <summary>
            Asserts that this DateTime value is before the specified DateTime value.
            </summary>
            <param name="source">The <i>DateTime</i> value to test.</param>
            <param name="comparer">The <i>DateTime</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>DateTime</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBeforeOrSameAs(System.DateTime,System.DateTime)">
            <summary>
            Asserts that this DateTime value is before or the same as the specified DateTime value.
            </summary>
            <param name="source">The <i>DateTime</i> value to test.</param>
            <param name="comparer">The <i>DateTime</i> to compare to.</param>
            <returns>The original <i>DateTime</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBeforeOrSameAs(System.DateTime,System.DateTime,System.String)">
            <summary>
            Asserts that this DateTime value is before or the same as the specified DateTime value.
            </summary>
            <param name="source">The <i>DateTime</i> value to test.</param>
            <param name="comparer">The <i>DateTime</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>DateTime</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBeforeOrSameAs(System.DateTime,System.DateTime,System.String,System.Object[])">
            <summary>
            Asserts that this DateTime value is before or the same as the specified DateTime value.
            </summary>
            <param name="source">The <i>DateTime</i> value to test.</param>
            <param name="comparer">The <i>DateTime</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>DateTime</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeAfter(System.DateTime,System.DateTime)">
            <summary>
            Asserts that this DateTime value is after the specified DateTime value.
            </summary>
            <param name="source">The <i>DateTime</i> value to test.</param>
            <param name="comparer">The <i>DateTime</i> to compare to.</param>
            <returns>The original <i>DateTime</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeAfter(System.DateTime,System.DateTime,System.String)">
            <summary>
            Asserts that this DateTime value is after the specified DateTime value.
            </summary>
            <param name="source">The <i>DateTime</i> value to test.</param>
            <param name="comparer">The <i>DateTime</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>DateTime</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeAfter(System.DateTime,System.DateTime,System.String,System.Object[])">
            <summary>
            Asserts that this DateTime value is after the specified DateTime value.
            </summary>
            <param name="source">The <i>DateTime</i> value to test.</param>
            <param name="comparer">The <i>DateTime</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>DateTime</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeAfterOrSameAs(System.DateTime,System.DateTime)">
            <summary>
            Asserts that this DateTime value is after or the same as the specified DateTime value.
            </summary>
            <param name="source">The <i>DateTime</i> value to test.</param>
            <param name="comparer">The <i>DateTime</i> to compare to.</param>
            <returns>The original <i>DateTime</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeAfterOrSameAs(System.DateTime,System.DateTime,System.String)">
            <summary>
            Asserts that this DateTime value is after or the same as the specified DateTime value.
            </summary>
            <param name="source">The <i>DateTime</i> value to test.</param>
            <param name="comparer">The <i>DateTime</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>DateTime</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeAfterOrSameAs(System.DateTime,System.DateTime,System.String,System.Object[])">
            <summary>
            Asserts that this DateTime value is after or the same as the specified DateTime value.
            </summary>
            <param name="source">The <i>DateTime</i> value to test.</param>
            <param name="comparer">The <i>DateTime</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>DateTime</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldEqual``1(``0,``0)">
            <summary>
            Asserts that this object is equal to another object.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="comparer">The <i>object</i> to compare to.</param>
            <returns>The original <i>object</i> that was tested.</returns>
            <remarks>This assertion can behave differently than expected if the object has overridden the Equals() method.</remarks>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldEqual``1(``0,``0,System.String)">
            <summary>
            Asserts that this object is equal to another object.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="comparer">The <i>object</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>object</i> that was tested.</returns>
            <remarks>This assertion can behave differently than expected if the object has overridden the Equals() method.</remarks>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            Asserts that this object is equal to another object.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="comparer">The <i>object</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>object</i> that was tested.</returns>
            <remarks>This assertion can behave differently than expected if the object has overridden the Equals() method.</remarks>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotEqual``1(``0,``0)">
            <summary>
            Asserts that this object is not equal to another object.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="comparer">The <i>object</i> to compare to.</param>
            <returns>The original <i>object</i> that was tested.</returns>
            <remarks>This assertion can behave differently than expected if the object has overridden the Equals() method.</remarks>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotEqual``1(``0,``0,System.String)">
            <summary>
            Asserts that this object is not equal to another object.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="comparer">The <i>object</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>object</i> that was tested.</returns>
            <remarks>This assertion can behave differently than expected if the object has overridden the Equals() method.</remarks>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            Asserts that this object is not equal to another object.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="comparer">The <i>object</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>object</i> that was tested.</returns>
            <remarks>This assertion can behave differently than expected if the object has overridden the Equals() method.</remarks>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeSameAs``1(``0,``0)">
            <summary>
            Asserts that this object has the same reference as another object.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="comparer">The <i>object</i> to compare to.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeSameAs``1(``0,``0,System.String)">
            <summary>
            Asserts that this object has the same reference as another object.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="comparer">The <i>object</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeSameAs``1(``0,``0,System.String,System.Object[])">
            <summary>
            Asserts that this object has the same reference as another object.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="comparer">The <i>object</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeSameAs``1(``0,``0)">
            <summary>
            Asserts that this object does not have the same reference as another object.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="comparer">The <i>object</i> to compare to.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeSameAs``1(``0,``0,System.String)">
            <summary>
            Asserts that this object does not have the same reference as another object.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="comparer">The <i>object</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeSameAs``1(``0,``0,System.String,System.Object[])">
            <summary>
            Asserts that this object does not have the same reference as another object.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="comparer">The <i>object</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldEqualIgnoringCase(System.String,System.String)">
            <summary>
            Asserts that this string value is equal to the specified string (ignoring case).
            </summary>
            <param name="source">The string value to test.</param>
            <param name="comparer">The <i>string</i> to compare to.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldEqualIgnoringCase(System.String,System.String,System.String)">
            <summary>
            Asserts that this string value is equal to the specified string (ignoring case).
            </summary>
            <param name="source">The string value to test.</param>
            <param name="comparer">The <i>string</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldEqualIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that this string value is equal to the specified string (ignoring case).
            </summary>
            <param name="source">The string value to test.</param>
            <param name="comparer">The <i>string</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotEqualIgnoringCase(System.String,System.String)">
            <summary>
            Asserts that this string value is not equal to the specified string (ignoring case).
            </summary>
            <param name="source">The string value to test.</param>
            <param name="comparer">The <i>string</i> to compare to.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotEqualIgnoringCase(System.String,System.String,System.String)">
            <summary>
            Asserts that this string value is not equal to the specified string (ignoring case).
            </summary>
            <param name="source">The string value to test.</param>
            <param name="comparer">The <i>string</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotEqualIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that this string value is not equal to the specified string (ignoring case).
            </summary>
            <param name="source">The string value to test.</param>
            <param name="comparer">The <i>string</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeEmpty(System.String)">
            <summary>
            Asserts that this string value is empty.
            </summary>
            <param name="source">The string value to test.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeEmpty(System.String,System.String)">
            <summary>
            Asserts that this string value is empty.
            </summary>
            <param name="source">The string value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeEmpty(System.String,System.String,System.Object[])">
            <summary>
            Asserts that this string value is empty.
            </summary>
            <param name="source">The string value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeEmpty(System.String)">
            <summary>
            Asserts that this string value is not empty.
            </summary>
            <param name="source">The string value to test.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeEmpty(System.String,System.String)">
            <summary>
            Asserts that this string value is not empty.
            </summary>
            <param name="source">The string value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeEmpty(System.String,System.String,System.Object[])">
            <summary>
            Asserts that this string value is not empty.
            </summary>
            <param name="source">The string value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldContain(System.String,System.String)">
            <summary>
            Asserts that this string value contains the specified substring.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="substring">The substring to test for containment.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldContain(System.String,System.String,System.String)">
            <summary>
            Asserts that this string value contains the specified substring.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="substring">The substring to test for containment.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldContain(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that this string value contains the specified substring.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="substring">The substring to test for containment.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldContainIgnoringCase(System.String,System.String)">
            <summary>
            Asserts that this string value contains the specified substring, ignoring case.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="substring">The substring to test for containment.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldContainIgnoringCase(System.String,System.String,System.String)">
            <summary>
            Asserts that this string value contains the specified substring, ignoring case.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="substring">The substring to test for containment.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldContainIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that this string value contains the specified substring, ignoring case.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="substring">The substring to test for containment.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotContain(System.String,System.String)">
            <summary>
            Asserts that this string value does not contain the specified substring.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="substring">The substring to test for containment.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotContain(System.String,System.String,System.String)">
            <summary>
            Asserts that this string value does not contain the specified substring.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="substring">The substring to test for containment.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotContain(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that this string value does not contain the specified substring.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="substring">The substring to test for containment.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotContainIgnoringCase(System.String,System.String)">
            <summary>
            Asserts that this string value does not contain the specified substring, ignoring case.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="substring">The substring to test for containment.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotContainIgnoringCase(System.String,System.String,System.String)">
            <summary>
            Asserts that this string value does not contain the specified substring, ignoring case.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="substring">The substring to test for containment.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotContainIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that this string value does not contain the specified substring, ignoring case.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="substring">The substring to test for containment.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveLengthOf(System.String,System.Int32)">
            <summary>
            Asserts that this string value has a specified length.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="length">The expected length of the string.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveLengthOf(System.String,System.Int32,System.String)">
            <summary>
            Asserts that this string value has a specified length.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="length">The expected length of the string.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveLengthOf(System.String,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this string value has a specified length.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="length">The expected length of the string.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotHaveLengthOf(System.String,System.Int32)">
            <summary>
            Asserts that this string value does not have a specified length.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="length">The length that the string should not be.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotHaveLengthOf(System.String,System.Int32,System.String)">
            <summary>
            Asserts that this string value does not have a specified length.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="length">The length that the string should not be.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotHaveLengthOf(System.String,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this string value does not have a specified length.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="length">The length that the string should not be.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveLengthOfAtLeast(System.String,System.Int32)">
            <summary>
            Asserts that this string value has a minimum specified length.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="length">The minimum expected length.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveLengthOfAtLeast(System.String,System.Int32,System.String)">
            <summary>
            Asserts that this string value has a minimum specified length.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="length">The minimum expected length.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveLengthOfAtLeast(System.String,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this string value has a minimum specified length.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="length">The minimum expected length.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveLengthOfAtMost(System.String,System.Int32)">
            <summary>
            Asserts that this string value has a maximum specified length.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="length">The maximum expected length.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveLengthOfAtMost(System.String,System.Int32,System.String)">
            <summary>
            Asserts that this string value has a maximum specified length.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="length">The maximum expected length.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveLengthOfAtMost(System.String,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this string value has a maximum specified length.
            </summary>
            <param name="source">This string value to test.</param>
            <param name="length">The maximum expected length.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>string</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Double,System.Double)">
            <summary>
            Asserts that this double value is greater than a certain value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>double</i> to compare to.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Asserts that this double value is greater than a certain value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>double</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts that this double value is greater than a certain value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>double</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Double,System.Double)">
            <summary>
            Asserts that this double value is greater than or equal to a certain value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>double</i> to compare to.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Asserts that this double value is greater than or equal to a certain value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>double</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts that this double value is greater than or equal to a certain value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>double</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Double,System.Double)">
            <summary>
            Asserts that this double value is less than a certain value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>double</i> to compare to.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Double,System.Double,System.String)">
            <summary>
            Asserts that this double value is less than a certain value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>double</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts that this double value is less than a certain value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>double</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Double,System.Double)">
            <summary>
            Asserts that this double value is less than or equal to a certain value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>double</i> to compare to.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Double,System.Double,System.String)">
            <summary>
            Asserts that this double value is less than or equal to a certain value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>double</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts that this double value is less than or equal to a certain value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>double</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Double,System.Double,System.Double)">
            <summary>
            Asserts that this double value is between two values.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>double</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>double</i> to be less than or equal to.</param>
            <returns>The original <i>double</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that this double value is between two values.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>double</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>double</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>double</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts that this double value is between two values.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>double</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>double</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>double</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Double,System.Double,System.Double)">
            <summary>
            Asserts that this double value is between two values.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>double</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>double</i> to be greater than.</param>
            <returns>The original <i>double</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that this double value is between two values.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>double</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>double</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>double</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts that this double value is between two values.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>double</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>double</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>double</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Double)">
            <summary>
            Asserts that this double value is positive or zero.
            </summary>
            <param name="source">The double value to test.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Double,System.String)">
            <summary>
            Asserts that this double value is positive or zero.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Double,System.String,System.Object[])">
            <summary>
            Asserts that this double value is positive or zero.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Double)">
            <summary>
            Asserts that this double value is negative.
            </summary>
            <param name="source">The double value to test.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Double,System.String)">
            <summary>
            Asserts that this double value is negative.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Double,System.String,System.Object[])">
            <summary>
            Asserts that this double value is negative.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeIntegral(System.Double)">
            <summary>
            Asserts that this double value is integral (does not have a fractional component).
            </summary>
            <param name="source">The double value to test.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeIntegral(System.Double,System.String)">
            <summary>
            Asserts that this double value is integral (does not have a fractional component).
            </summary>
            <param name="source">The double value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeIntegral(System.Double,System.String,System.Object[])">
            <summary>
            Asserts that this double value is integral (does not have a fractional component).
            </summary>
            <param name="source">The double value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFractional(System.Double)">
            <summary>
            Asserts that this double value is fractional.
            </summary>
            <param name="source">The double value to test.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFractional(System.Double,System.String)">
            <summary>
            Asserts that this double value is fractional.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFractional(System.Double,System.String,System.Object[])">
            <summary>
            Asserts that this double value is fractional.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldRoundTo(System.Double,System.Int64)">
            <summary>
            Asserts that this double value rounds to a specified value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldRoundTo(System.Double,System.Int64,System.String)">
            <summary>
            Asserts that this double value rounds to a specified value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldRoundTo(System.Double,System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that this double value rounds to a specified value.
            </summary>
            <param name="source">The double value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>double</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> does not contain any items.
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> does not contain any items.
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeEmpty``1(System.Collections.Generic.ICollection{``0},System.String,System.Object[])">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> does not contain any items.
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> contains items.
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> contains items.
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeEmpty``1(System.Collections.Generic.ICollection{``0},System.String,System.Object[])">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> contains items.
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldContain``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific item.
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <param name="item">The item to check for.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldContain``1(System.Collections.Generic.ICollection{``0},``0,System.String)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific item.
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <param name="item">The item to check for.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldContain``1(System.Collections.Generic.ICollection{``0},``0,System.String,System.Object[])">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific item.
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <param name="item">The item to check for.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotContain``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> does not contain a specific item.
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <param name="item">The item to check for.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotContain``1(System.Collections.Generic.ICollection{``0},``0,System.String)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> does not contain a specific item.
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <param name="item">The item to check for.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotContain``1(System.Collections.Generic.ICollection{``0},``0,System.String,System.Object[])">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> does not contain a specific item.
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <param name="item">The item to check for.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveCountOf``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specified number of items..
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <param name="count">The expected count.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveCountOf``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specified number of items..
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <param name="count">The expected count.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveCountOf``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specified number of items..
            </summary>
            <typeparam name="T">The type that the collection contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to test.</param>
            <param name="count">The expected count.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <see cref="T:System.Collections.Generic.ICollection`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> does not contain any items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> does not contain any items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> does not contain any items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldContain``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains a specific item.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="item">The item to check for.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldContain``1(System.Collections.Generic.IEnumerable{``0},``0,System.String)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains a specific item.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="item">The item to check for.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldContain``1(System.Collections.Generic.IEnumerable{``0},``0,System.String,System.Object[])">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains a specific item.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="item">The item to check for.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotContain``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> does not contain a specific item.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="item">The item to check for.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotContain``1(System.Collections.Generic.IEnumerable{``0},``0,System.String)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> does not contain a specific item.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="item">The item to check for.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotContain``1(System.Collections.Generic.IEnumerable{``0},``0,System.String,System.Object[])">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> does not contain a specific item.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="item">The item to check for.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveCountOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains a specified number of items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="count">The expected count.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveCountOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains a specified number of items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="count">The expected count.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveCountOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains a specified number of items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="count">The expected count.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotHaveCountOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> does not contain a specified number of items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="count">The count that enumerable should not have.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotHaveCountOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> does not contain a specified number of items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="count">The count that enumerable should not have.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotHaveCountOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> does not contain a specified number of items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="count">The count that enumerable should not have.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveCountOfAtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains a minimum specified number of items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="count">The minimum expected count.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveCountOfAtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains a minimum specified number of items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="count">The minimum expected count.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveCountOfAtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains a minimum specified number of items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="count">The minimum expected count.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveCountOfAtMost``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains a maximum specified number of items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="count">The maximum expected count.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveCountOfAtMost``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String)">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains a maximum specified number of items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="count">The maximum expected count.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldHaveCountOfAtMost``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains a maximum specified number of items.
            </summary>
            <typeparam name="T">The type that the enumerable contains.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to test.</param>
            <param name="count">The maximum expected count.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldEqualIgnoringCase(System.Char,System.Char)">
            <summary>
            Asserts that this char value is equal to the specified char (ignoring case).
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldEqualIgnoringCase(System.Char,System.Char,System.String)">
            <summary>
            Asserts that this char value is equal to the specified char (ignoring case).
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldEqualIgnoringCase(System.Char,System.Char,System.String,System.Object[])">
            <summary>
            Asserts that this char value is equal to the specified char (ignoring case).
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotEqualIgnoringCase(System.Char,System.Char)">
            <summary>
            Asserts that this char value is not equal to the specified char (ignoring case).
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotEqualIgnoringCase(System.Char,System.Char,System.String)">
            <summary>
            Asserts that this char value is not equal to the specified char (ignoring case).
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotEqualIgnoringCase(System.Char,System.Char,System.String,System.Object[])">
            <summary>
            Asserts that this char value is not equal to the specified char (ignoring case).
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Char,System.Char)">
            <summary>
            Asserts that this char value is greater than a certain value.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Char,System.Char,System.String)">
            <summary>
            Asserts that this char value is greater than a certain value.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Char,System.Char,System.String,System.Object[])">
            <summary>
            Asserts that this char value is greater than a certain value.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Char,System.Char)">
            <summary>
            Asserts that this char value is greater than or equal to a certain value.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Char,System.Char,System.String)">
            <summary>
            Asserts that this char value is greater than or equal to a certain value.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Char,System.Char,System.String,System.Object[])">
            <summary>
            Asserts that this char value is greater than or equal to a certain value.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Char,System.Char)">
            <summary>
            Asserts that this char value is less than a certain value.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Char,System.Char,System.String)">
            <summary>
            Asserts that this char value is less than a certain value.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Char,System.Char,System.String,System.Object[])">
            <summary>
            Asserts that this char value is less than a certain value.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Char,System.Char)">
            <summary>
            Asserts that this char value is less than or equal to a certain value.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Char,System.Char,System.String)">
            <summary>
            Asserts that this char value is less than or equal to a certain value.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Char,System.Char,System.String,System.Object[])">
            <summary>
            Asserts that this char value is less than or equal to a certain value.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="comparer">The <i>char</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Char,System.Char,System.Char)">
            <summary>
            Asserts that this char value is between two values.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>char</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>char</i> to be less than or equal to.</param>
            <returns>The original <i>char</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Asserts that this char value is between two values.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>char</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>char</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>char</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Char,System.Char,System.Char,System.String,System.Object[])">
            <summary>
            Asserts that this char value is between two values.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>char</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>char</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>char</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Char,System.Char,System.Char)">
            <summary>
            Asserts that this char value is between two values.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>char</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>char</i> to be greater than.</param>
            <returns>The original <i>char</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Asserts that this char value is between two values.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>char</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>char</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>char</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Char,System.Char,System.Char,System.String,System.Object[])">
            <summary>
            Asserts that this char value is between two values.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>char</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>char</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>char</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePrintable(System.Char)">
            <summary>
            Asserts that this char value is in the printable range.
            </summary>
            <param name="source">The char value to test.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePrintable(System.Char,System.String)">
            <summary>
            Asserts that this char value is in the printable range.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePrintable(System.Char,System.String,System.Object[])">
            <summary>
            Asserts that this char value is in the printable range.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBePrintable(System.Char)">
            <summary>
            Asserts that this char value is not in the printable range.
            </summary>
            <param name="source">The char value to test.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBePrintable(System.Char,System.String)">
            <summary>
            Asserts that this char value is not in the printable range.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBePrintable(System.Char,System.String,System.Object[])">
            <summary>
            Asserts that this char value is not in the printable range.
            </summary>
            <param name="source">The char value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>char</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Byte,System.Byte)">
            <summary>
            Asserts that this byte value is greater than a certain value.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="comparer">The <i>byte</i> to compare to.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that this byte value is greater than a certain value.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="comparer">The <i>byte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Asserts that this byte value is greater than a certain value.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="comparer">The <i>byte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Byte,System.Byte)">
            <summary>
            Asserts that this byte value is greater than or equal to a certain value.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="comparer">The <i>byte</i> to compare to.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that this byte value is greater than or equal to a certain value.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="comparer">The <i>byte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Asserts that this byte value is greater than or equal to a certain value.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="comparer">The <i>byte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Byte,System.Byte)">
            <summary>
            Asserts that this byte value is less than a certain value.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="comparer">The <i>byte</i> to compare to.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that this byte value is less than a certain value.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="comparer">The <i>byte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Asserts that this byte value is less than a certain value.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="comparer">The <i>byte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Byte,System.Byte)">
            <summary>
            Asserts that this byte value is less than or equal to a certain value.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="comparer">The <i>byte</i> to compare to.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that this byte value is less than or equal to a certain value.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="comparer">The <i>byte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Asserts that this byte value is less than or equal to a certain value.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="comparer">The <i>byte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Byte,System.Byte,System.Byte)">
            <summary>
            Asserts that this byte value is between two values.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>byte</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>byte</i> to be less than or equal to.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that this byte value is between two values.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>byte</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>byte</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Byte,System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Asserts that this byte value is between two values.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>byte</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>byte</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Byte,System.Byte,System.Byte)">
            <summary>
            Asserts that this byte value is between two values.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>byte</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>byte</i> to be greater than.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Asserts that this byte value is between two values.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>byte</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>byte</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Byte,System.Byte,System.Byte,System.String,System.Object[])">
            <summary>
            Asserts that this byte value is between two values.
            </summary>
            <param name="source">The byte value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>byte</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>byte</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>byte</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNull``1(``0)">
            <summary>
            Asserts that this object is null.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNull``1(``0,System.String)">
            <summary>
            Asserts that this object is null.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNull``1(``0,System.String,System.Object[])">
            <summary>
            Asserts that this object is null.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeNull``1(``0)">
            <summary>
            Asserts that this object is not null.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeNull``1(``0,System.String)">
            <summary>
            Asserts that this object is not null.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeNull``1(``0,System.String,System.Object[])">
            <summary>
            Asserts that this object is not null.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Int64,System.Int64)">
            <summary>
            Asserts that this long value is greater than a certain value.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that this long value is greater than a certain value.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that this long value is greater than a certain value.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Int64,System.Int64)">
            <summary>
            Asserts that this long value is greater than or equal to a certain value.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that this long value is greater than or equal to a certain value.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that this long value is greater than or equal to a certain value.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Int64,System.Int64)">
            <summary>
            Asserts that this long value is less than a certain value.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that this long value is less than a certain value.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that this long value is less than a certain value.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Int64,System.Int64)">
            <summary>
            Asserts that this long value is less than or equal to a certain value.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that this long value is less than or equal to a certain value.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that this long value is less than or equal to a certain value.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Int64,System.Int64,System.Int64)">
            <summary>
            Asserts that this long value is between two values.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>long</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>long</i> to be less than or equal to.</param>
            <returns>The original <i>long</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that this long value is between two values.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>long</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>long</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>long</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Int64,System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that this long value is between two values.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>long</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>long</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>long</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Int64,System.Int64,System.Int64)">
            <summary>
            Asserts that this long value is between two values.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>long</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>long</i> to be greater than.</param>
            <returns>The original <i>long</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that this long value is between two values.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>long</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>long</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>long</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Int64,System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that this long value is between two values.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>long</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>long</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>long</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Int64)">
            <summary>
            Asserts that this long value is positive or zero.
            </summary>
            <param name="source">The long value to test.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Int64,System.String)">
            <summary>
            Asserts that this long value is positive or zero.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that this long value is positive or zero.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Int64)">
            <summary>
            Asserts that this long value is negative.
            </summary>
            <param name="source">The long value to test.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Int64,System.String)">
            <summary>
            Asserts that this long value is negative.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that this long value is negative.
            </summary>
            <param name="source">The long value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>long</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.UInt32,System.UInt32)">
            <summary>
            Asserts that this uint value is greater than a certain value.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="comparer">The <i>uint</i> to compare to.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that this uint value is greater than a certain value.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="comparer">The <i>uint</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Asserts that this uint value is greater than a certain value.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="comparer">The <i>uint</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.UInt32,System.UInt32)">
            <summary>
            Asserts that this uint value is greater than or equal to a certain value.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="comparer">The <i>uint</i> to compare to.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that this uint value is greater than or equal to a certain value.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="comparer">The <i>uint</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Asserts that this uint value is greater than or equal to a certain value.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="comparer">The <i>uint</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.UInt32,System.UInt32)">
            <summary>
            Asserts that this uint value is less than a certain value.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="comparer">The <i>uint</i> to compare to.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that this uint value is less than a certain value.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="comparer">The <i>uint</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Asserts that this uint value is less than a certain value.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="comparer">The <i>uint</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.UInt32,System.UInt32)">
            <summary>
            Asserts that this uint value is less than or equal to a certain value.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="comparer">The <i>uint</i> to compare to.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that this uint value is less than or equal to a certain value.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="comparer">The <i>uint</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Asserts that this uint value is less than or equal to a certain value.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="comparer">The <i>uint</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Asserts that this uint value is between two values.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>uint</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>uint</i> to be less than or equal to.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that this uint value is between two values.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>uint</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>uint</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.UInt32,System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Asserts that this uint value is between two values.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>uint</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>uint</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Asserts that this uint value is between two values.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>uint</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>uint</i> to be greater than.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that this uint value is between two values.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>uint</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>uint</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.UInt32,System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Asserts that this uint value is between two values.
            </summary>
            <param name="source">The uint value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>uint</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>uint</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>uint</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Decimal,System.Decimal)">
            <summary>
            Asserts that this decimal value is greater than a certain value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>decimal</i> to compare to.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that this decimal value is greater than a certain value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>decimal</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that this decimal value is greater than a certain value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>decimal</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Decimal,System.Decimal)">
            <summary>
            Asserts that this decimal value is greater than or equal to a certain value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>decimal</i> to compare to.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that this decimal value is greater than or equal to a certain value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>decimal</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that this decimal value is greater than or equal to a certain value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>decimal</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Decimal,System.Decimal)">
            <summary>
            Asserts that this decimal value is less than a certain value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>decimal</i> to compare to.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that this decimal value is less than a certain value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>decimal</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that this decimal value is less than a certain value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>decimal</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Decimal,System.Decimal)">
            <summary>
            Asserts that this decimal value is less than or equal to a certain value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>decimal</i> to compare to.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that this decimal value is less than or equal to a certain value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>decimal</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that this decimal value is less than or equal to a certain value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>decimal</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Asserts that this decimal value is between two values.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>decimal</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>decimal</i> to be less than or equal to.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that this decimal value is between two values.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>decimal</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>decimal</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Decimal,System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that this decimal value is between two values.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>decimal</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>decimal</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Asserts that this decimal value is between two values.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>decimal</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>decimal</i> to be greater than.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that this decimal value is between two values.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>decimal</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>decimal</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Decimal,System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that this decimal value is between two values.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>decimal</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>decimal</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Decimal)">
            <summary>
            Asserts that this decimal value is positive or zero.
            </summary>
            <param name="source">The decimal value to test.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Decimal,System.String)">
            <summary>
            Asserts that this decimal value is positive or zero.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that this decimal value is positive or zero.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Decimal)">
            <summary>
            Asserts that this decimal value is negative.
            </summary>
            <param name="source">The decimal value to test.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Decimal,System.String)">
            <summary>
            Asserts that this decimal value is negative.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that this decimal value is negative.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeIntegral(System.Decimal)">
            <summary>
            Asserts that this decimal value is integral (does not have a fractional component).
            </summary>
            <param name="source">The decimal value to test.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeIntegral(System.Decimal,System.String)">
            <summary>
            Asserts that this decimal value is integral (does not have a fractional component).
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeIntegral(System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that this decimal value is integral (does not have a fractional component).
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFractional(System.Decimal)">
            <summary>
            Asserts that this decimal value is fractional.
            </summary>
            <param name="source">The decimal value to test.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFractional(System.Decimal,System.String)">
            <summary>
            Asserts that this decimal value is fractional.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFractional(System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that this decimal value is fractional.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldRoundTo(System.Decimal,System.Int64)">
            <summary>
            Asserts that this decimal value rounds to a specified value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldRoundTo(System.Decimal,System.Int64,System.String)">
            <summary>
            Asserts that this decimal value rounds to a specified value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldRoundTo(System.Decimal,System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that this decimal value rounds to a specified value.
            </summary>
            <param name="source">The decimal value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>decimal</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.UInt16,System.UInt16)">
            <summary>
            Asserts that this ushort value is greater than a certain value.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="comparer">The <i>ushort</i> to compare to.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that this ushort value is greater than a certain value.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="comparer">The <i>ushort</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.UInt16,System.UInt16,System.String,System.Object[])">
            <summary>
            Asserts that this ushort value is greater than a certain value.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="comparer">The <i>ushort</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.UInt16,System.UInt16)">
            <summary>
            Asserts that this ushort value is greater than or equal to a certain value.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="comparer">The <i>ushort</i> to compare to.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that this ushort value is greater than or equal to a certain value.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="comparer">The <i>ushort</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.UInt16,System.UInt16,System.String,System.Object[])">
            <summary>
            Asserts that this ushort value is greater than or equal to a certain value.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="comparer">The <i>ushort</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.UInt16,System.UInt16)">
            <summary>
            Asserts that this ushort value is less than a certain value.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="comparer">The <i>ushort</i> to compare to.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that this ushort value is less than a certain value.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="comparer">The <i>ushort</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.UInt16,System.UInt16,System.String,System.Object[])">
            <summary>
            Asserts that this ushort value is less than a certain value.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="comparer">The <i>ushort</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.UInt16,System.UInt16)">
            <summary>
            Asserts that this ushort value is less than or equal to a certain value.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="comparer">The <i>ushort</i> to compare to.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that this ushort value is less than or equal to a certain value.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="comparer">The <i>ushort</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.UInt16,System.UInt16,System.String,System.Object[])">
            <summary>
            Asserts that this ushort value is less than or equal to a certain value.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="comparer">The <i>ushort</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Asserts that this ushort value is between two values.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>ushort</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>ushort</i> to be less than or equal to.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that this ushort value is between two values.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>ushort</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>ushort</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.UInt16,System.UInt16,System.UInt16,System.String,System.Object[])">
            <summary>
            Asserts that this ushort value is between two values.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>ushort</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>ushort</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Asserts that this ushort value is between two values.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>ushort</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>ushort</i> to be greater than.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Asserts that this ushort value is between two values.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>ushort</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>ushort</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.UInt16,System.UInt16,System.UInt16,System.String,System.Object[])">
            <summary>
            Asserts that this ushort value is between two values.
            </summary>
            <param name="source">The ushort value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>ushort</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>ushort</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>ushort</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.SByte,System.SByte)">
            <summary>
            Asserts that this sbyte value is greater than a certain value.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="comparer">The <i>sbyte</i> to compare to.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that this sbyte value is greater than a certain value.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="comparer">The <i>sbyte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.SByte,System.SByte,System.String,System.Object[])">
            <summary>
            Asserts that this sbyte value is greater than a certain value.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="comparer">The <i>sbyte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.SByte,System.SByte)">
            <summary>
            Asserts that this sbyte value is greater than or equal to a certain value.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="comparer">The <i>sbyte</i> to compare to.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that this sbyte value is greater than or equal to a certain value.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="comparer">The <i>sbyte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.SByte,System.SByte,System.String,System.Object[])">
            <summary>
            Asserts that this sbyte value is greater than or equal to a certain value.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="comparer">The <i>sbyte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.SByte,System.SByte)">
            <summary>
            Asserts that this sbyte value is less than a certain value.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="comparer">The <i>sbyte</i> to compare to.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that this sbyte value is less than a certain value.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="comparer">The <i>sbyte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.SByte,System.SByte,System.String,System.Object[])">
            <summary>
            Asserts that this sbyte value is less than a certain value.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="comparer">The <i>sbyte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.SByte,System.SByte)">
            <summary>
            Asserts that this sbyte value is less than or equal to a certain value.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="comparer">The <i>sbyte</i> to compare to.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that this sbyte value is less than or equal to a certain value.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="comparer">The <i>sbyte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.SByte,System.SByte,System.String,System.Object[])">
            <summary>
            Asserts that this sbyte value is less than or equal to a certain value.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="comparer">The <i>sbyte</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.SByte,System.SByte,System.SByte)">
            <summary>
            Asserts that this sbyte value is between two values.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>sbyte</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>sbyte</i> to be less than or equal to.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that this sbyte value is between two values.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>sbyte</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>sbyte</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.SByte,System.SByte,System.SByte,System.String,System.Object[])">
            <summary>
            Asserts that this sbyte value is between two values.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>sbyte</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>sbyte</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.SByte,System.SByte,System.SByte)">
            <summary>
            Asserts that this sbyte value is between two values.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>sbyte</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>sbyte</i> to be greater than.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Asserts that this sbyte value is between two values.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>sbyte</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>sbyte</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.SByte,System.SByte,System.SByte,System.String,System.Object[])">
            <summary>
            Asserts that this sbyte value is between two values.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>sbyte</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>sbyte</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.SByte)">
            <summary>
            Asserts that this sbyte value is positive or zero.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.SByte,System.String)">
            <summary>
            Asserts that this sbyte value is positive or zero.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.SByte,System.String,System.Object[])">
            <summary>
            Asserts that this sbyte value is positive or zero.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.SByte)">
            <summary>
            Asserts that this sbyte value is negative.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.SByte,System.String)">
            <summary>
            Asserts that this sbyte value is negative.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.SByte,System.String,System.Object[])">
            <summary>
            Asserts that this sbyte value is negative.
            </summary>
            <param name="source">The sbyte value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>sbyte</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Int32,System.Int32)">
            <summary>
            Asserts that this int value is greater than a certain value.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="comparer">The <i>int</i> to compare to.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that this int value is greater than a certain value.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="comparer">The <i>int</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this int value is greater than a certain value.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="comparer">The <i>int</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Int32,System.Int32)">
            <summary>
            Asserts that this int value is greater than or equal to a certain value.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="comparer">The <i>int</i> to compare to.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that this int value is greater than or equal to a certain value.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="comparer">The <i>int</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this int value is greater than or equal to a certain value.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="comparer">The <i>int</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Int32,System.Int32)">
            <summary>
            Asserts that this int value is less than a certain value.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="comparer">The <i>int</i> to compare to.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that this int value is less than a certain value.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="comparer">The <i>int</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this int value is less than a certain value.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="comparer">The <i>int</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Int32,System.Int32)">
            <summary>
            Asserts that this int value is less than or equal to a certain value.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="comparer">The <i>int</i> to compare to.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that this int value is less than or equal to a certain value.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="comparer">The <i>int</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this int value is less than or equal to a certain value.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="comparer">The <i>int</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Asserts that this int value is between two values.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>int</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>int</i> to be less than or equal to.</param>
            <returns>The original <i>int</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that this int value is between two values.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>int</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>int</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>int</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Int32,System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this int value is between two values.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>int</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>int</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>int</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Asserts that this int value is between two values.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>int</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>int</i> to be greater than.</param>
            <returns>The original <i>int</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that this int value is between two values.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>int</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>int</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>int</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Int32,System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this int value is between two values.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>int</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>int</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>int</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Int32)">
            <summary>
            Asserts that this int value is positive or zero.
            </summary>
            <param name="source">The int value to test.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Int32,System.String)">
            <summary>
            Asserts that this int value is positive or zero.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this int value is positive or zero.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Int32)">
            <summary>
            Asserts that this int value is negative.
            </summary>
            <param name="source">The int value to test.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Int32,System.String)">
            <summary>
            Asserts that this int value is negative.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that this int value is negative.
            </summary>
            <param name="source">The int value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>int</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFalse(System.Boolean)">
            <summary>
            Asserts that this boolean value is false.
            </summary>
            <param name="source">The <i>boolean</i> value to test.</param>
            <returns>The original <i>boolean</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFalse(System.Boolean,System.String)">
            <summary>
            Asserts that this boolean value is false.
            </summary>
            <param name="source">The <i>boolean</i> value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>boolean</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that this boolean value is false.
            </summary>
            <param name="source">The <i>boolean</i> value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>boolean</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFalse(System.Nullable{System.Boolean})">
            <summary>
            Asserts that this nullable boolean value is false.
            </summary>
            <param name="source">The nullable boolean value to test.</param>
            <returns>The original nullable boolean that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFalse(System.Nullable{System.Boolean},System.String)">
            <summary>
            Asserts that this nullable boolean value is false.
            </summary>
            <param name="source">The nullable boolean value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original nullable boolean that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFalse(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that this nullable boolean value is false.
            </summary>
            <param name="source">The nullable boolean value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original nullable boolean that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeTrue(System.Boolean)">
            <summary>
            Asserts that this boolean value is true.
            </summary>
            <param name="source">The <i>boolean</i> value to test.</param>
            <returns>The original <i>boolean</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeTrue(System.Boolean,System.String)">
            <summary>
            Asserts that this boolean value is true.
            </summary>
            <param name="source">The <i>boolean</i> value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>boolean</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that this boolean value is true.
            </summary>
            <param name="source">The <i>boolean</i> value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>boolean</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeTrue(System.Nullable{System.Boolean})">
            <summary>
            Asserts that this nullable boolean value is true.
            </summary>
            <param name="source">The nullable boolean value to test.</param>
            <returns>The original nullable boolean that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeTrue(System.Nullable{System.Boolean},System.String)">
            <summary>
            Asserts that this nullable boolean value is true.
            </summary>
            <param name="source">The nullable boolean value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original nullable boolean that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeTrue(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that this nullable boolean value is true.
            </summary>
            <param name="source">The nullable boolean value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original nullable boolean that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeOfType``1(``0,System.Type)">
            <summary>
            Asserts that this object is a certain type.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="type">The <see cref="T:System.Type"/> to compare to.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeOfType``1(``0,System.Type,System.String)">
            <summary>
            Asserts that this object is a certain type.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="type">The <see cref="T:System.Type"/> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeOfType``1(``0,System.Type,System.String,System.Object[])">
            <summary>
            Asserts that this object is a certain type.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="type">The <see cref="T:System.Type"/> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeOfType``1(``0,System.Type)">
            <summary>
            Asserts that this object is not a certain type.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="type">The <see cref="T:System.Type"/> to compare to.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeOfType``1(``0,System.Type,System.String)">
            <summary>
            Asserts that this object is not a certain type.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="type">The <see cref="T:System.Type"/> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeOfType``1(``0,System.Type,System.String,System.Object[])">
            <summary>
            Asserts that this object is not a certain type.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="source">The object to test.</param>
            <param name="type">The <see cref="T:System.Type"/> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>object</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Single,System.Single)">
            <summary>
            Asserts that this float value is greater than a certain value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>float</i> to compare to.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Single,System.Single,System.String)">
            <summary>
            Asserts that this float value is greater than a certain value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>float</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts that this float value is greater than a certain value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>float</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Single,System.Single)">
            <summary>
            Asserts that this float value is greater than or equal to a certain value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>float</i> to compare to.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Asserts that this float value is greater than or equal to a certain value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>float</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts that this float value is greater than or equal to a certain value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>float</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Single,System.Single)">
            <summary>
            Asserts that this float value is less than a certain value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>float</i> to compare to.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Single,System.Single,System.String)">
            <summary>
            Asserts that this float value is less than a certain value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>float</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts that this float value is less than a certain value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>float</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Single,System.Single)">
            <summary>
            Asserts that this float value is less than or equal to a certain value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>float</i> to compare to.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Single,System.Single,System.String)">
            <summary>
            Asserts that this float value is less than or equal to a certain value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>float</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts that this float value is less than or equal to a certain value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>float</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Single,System.Single,System.Single)">
            <summary>
            Asserts that this float value is between two values.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>float</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>float</i> to be less than or equal to.</param>
            <returns>The original <i>float</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that this float value is between two values.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>float</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>float</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>float</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts that this float value is between two values.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>float</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>float</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>float</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Single,System.Single,System.Single)">
            <summary>
            Asserts that this float value is between two values.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>float</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>float</i> to be greater than.</param>
            <returns>The original <i>float</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that this float value is between two values.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>float</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>float</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>float</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts that this float value is between two values.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>float</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>float</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>float</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Single)">
            <summary>
            Asserts that this float value is positive or zero.
            </summary>
            <param name="source">The float value to test.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Single,System.String)">
            <summary>
            Asserts that this float value is positive or zero.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBePositive(System.Single,System.String,System.Object[])">
            <summary>
            Asserts that this float value is positive or zero.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Single)">
            <summary>
            Asserts that this float value is negative.
            </summary>
            <param name="source">The float value to test.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Single,System.String)">
            <summary>
            Asserts that this float value is negative.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeNegative(System.Single,System.String,System.Object[])">
            <summary>
            Asserts that this float value is negative.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeIntegral(System.Single)">
            <summary>
            Asserts that this float value is integral (does not have a fractional component).
            </summary>
            <param name="source">The float value to test.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeIntegral(System.Single,System.String)">
            <summary>
            Asserts that this float value is integral (does not have a fractional component).
            </summary>
            <param name="source">The float value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeIntegral(System.Single,System.String,System.Object[])">
            <summary>
            Asserts that this float value is integral (does not have a fractional component).
            </summary>
            <param name="source">The float value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFractional(System.Single)">
            <summary>
            Asserts that this float value is fractional.
            </summary>
            <param name="source">The float value to test.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFractional(System.Single,System.String)">
            <summary>
            Asserts that this float value is fractional.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeFractional(System.Single,System.String,System.Object[])">
            <summary>
            Asserts that this float value is fractional.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldRoundTo(System.Single,System.Int64)">
            <summary>
            Asserts that this float value rounds to a specified value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldRoundTo(System.Single,System.Int64,System.String)">
            <summary>
            Asserts that this float value rounds to a specified value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldRoundTo(System.Single,System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that this float value rounds to a specified value.
            </summary>
            <param name="source">The float value to test.</param>
            <param name="comparer">The <i>long</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>float</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.UInt64,System.UInt64)">
            <summary>
            Asserts that this ulong value is greater than a certain value.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="comparer">The <i>ulong</i> to compare to.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that this ulong value is greater than a certain value.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="comparer">The <i>ulong</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThan(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Asserts that this ulong value is greater than a certain value.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="comparer">The <i>ulong</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.UInt64,System.UInt64)">
            <summary>
            Asserts that this ulong value is greater than or equal to a certain value.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="comparer">The <i>ulong</i> to compare to.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that this ulong value is greater than or equal to a certain value.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="comparer">The <i>ulong</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeGreaterThanOrEqualTo(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Asserts that this ulong value is greater than or equal to a certain value.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="comparer">The <i>ulong</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.UInt64,System.UInt64)">
            <summary>
            Asserts that this ulong value is less than a certain value.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="comparer">The <i>ulong</i> to compare to.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that this ulong value is less than a certain value.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="comparer">The <i>ulong</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThan(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Asserts that this ulong value is less than a certain value.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="comparer">The <i>ulong</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.UInt64,System.UInt64)">
            <summary>
            Asserts that this ulong value is less than or equal to a certain value.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="comparer">The <i>ulong</i> to compare to.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that this ulong value is less than or equal to a certain value.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="comparer">The <i>ulong</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeLessThanOrEqualTo(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Asserts that this ulong value is less than or equal to a certain value.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="comparer">The <i>ulong</i> to compare to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Asserts that this ulong value is between two values.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>ulong</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>ulong</i> to be less than or equal to.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that this ulong value is between two values.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>ulong</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>ulong</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeBetween(System.UInt64,System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Asserts that this ulong value is between two values.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="lowerInclusive">The lower inclusive <i>ulong</i> to be greater than or equal to.</param>
            <param name="upperInclusive">The upper inclusive <i>ulong</i> to be less than or equal to.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerInclusive argument is greater than or equal to the upperInclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Asserts that this ulong value is between two values.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>ulong</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>ulong</i> to be greater than.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that this ulong value is between two values.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>ulong</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>ulong</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldNotBeBetween(System.UInt64,System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Asserts that this ulong value is between two values.
            </summary>
            <param name="source">The ulong value to test.</param>
            <param name="lowerExclusive">The lower inclusive <i>ulong</i> to be less than.</param>
            <param name="upperExclusive">The upper inclusive <i>ulong</i> to be greater than.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>ulong</i> that was tested.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the lowerExclusive argument is greater than or equal to the upperExclusive argument.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeAssignableFrom``1(System.Type)">
            <summary>
            Asserts that this type value is assignable from another type.
            </summary>
            <typeparam name="TComparer">The <i>Type</i> to check for assignment from.</typeparam>
            <param name="source">The type value to test.</param>
            <returns>The original <i>Type</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeAssignableFrom``1(System.Type,System.String)">
            <summary>
            Asserts that this type value is assignable from another type.
            </summary>
            <typeparam name="TComparer">The <i>Type</i> to check for assignment from.</typeparam>
            <param name="source">The type value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>Type</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeAssignableFrom``1(System.Type,System.String,System.Object[])">
            <summary>
            Asserts that this type value is assignable from another type.
            </summary>
            <typeparam name="TComparer">The <i>Type</i> to check for assignment from.</typeparam>
            <param name="source">The type value to test.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>Type</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeAssignableFrom(System.Type,System.Type)">
            <summary>
            Asserts that this type value is assignable from another type.
            </summary>
            <param name="source">The type value to test.</param>
            <param name="comparer">The <i>Type</i> to check for assignment from.</param>
            <returns>The original <i>Type</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeAssignableFrom(System.Type,System.Type,System.String)">
            <summary>
            Asserts that this type value is assignable from another type.
            </summary>
            <param name="source">The type value to test.</param>
            <param name="comparer">The <i>Type</i> to check for assignment from.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <returns>The original <i>Type</i> that was tested.</returns>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.ExtensionMethods.ShouldBeAssignableFrom(System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Asserts that this type value is assignable from another type.
            </summary>
            <param name="source">The type value to test.</param>
            <param name="comparer">The <i>Type</i> to check for assignment from.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <returns>The original <i>Type</i> that was tested.</returns>
        </member>
        <member name="T:SoftwareApproach.TestingExtensions.Testing">
            <summary>
            Provides a set of static methods for testing.
            </summary>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.Testing.ShouldThrowException``1(System.Action)">
            <summary>
            Asserts that the method should throw an exception.
            </summary>
            <typeparam name="TExceptionType">The type of the expected exception.</typeparam>
            <param name="action">An <see cref="T:System.Action"/> to perform exception testing on.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <i>action</i> parameter is null.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.Testing.ShouldThrowException``1(System.Action,System.String)">
            <summary>
            Asserts that the method should throw an exception.
            </summary>
            <typeparam name="TExceptionType">The type of the expected exception.</typeparam>
            <param name="action">An <see cref="T:System.Action"/> to perform exception testing on.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <i>action</i> parameter is null.</exception>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.Testing.ShouldThrowException``1(System.Action,System.String,System.Object[])">
            <summary>
            Asserts that the method should throw an exception.
            </summary>
            <typeparam name="TExceptionType">The type of the expected exception.</typeparam>
            <param name="action">An <see cref="T:System.Action"/> to perform exception testing on.</param>
            <param name="message">A message to display if the assertion fails.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <i>action</i> parameter is null.</exception>
        </member>
        <member name="T:SoftwareApproach.TestingExtensions.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SoftwareApproach.TestingExtensions.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SoftwareApproach.TestingExtensions.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SoftwareApproach.TestingExtensions.Resources.ActualExpectedContainString">
            <summary>
              Looks up a localized string similar to Actual:&lt;{0}&gt;. Expected To contain&lt;{1}&gt;..
            </summary>
        </member>
        <member name="P:SoftwareApproach.TestingExtensions.Resources.ActualExpectedRangeString">
            <summary>
              Looks up a localized string similar to Actual:&lt;{0}&gt;. Expected&lt;{1} to {2}&gt;..
            </summary>
        </member>
        <member name="P:SoftwareApproach.TestingExtensions.Resources.ActualExpectedString">
            <summary>
              Looks up a localized string similar to Actual:&lt;{0}&gt;. Expected&lt;{1}&gt;..
            </summary>
        </member>
        <member name="P:SoftwareApproach.TestingExtensions.Resources.ActualString">
            <summary>
              Looks up a localized string similar to Actual:&lt;{0}&gt;..
            </summary>
        </member>
        <member name="P:SoftwareApproach.TestingExtensions.Resources.ArgumentOutOfRangeExceptionLowerNotLessThanUpperMessage">
            <summary>
              Looks up a localized string similar to The lowerInclusive must be less than the upperInclusive..
            </summary>
        </member>
        <member name="P:SoftwareApproach.TestingExtensions.Resources.AssignableFromString">
            <summary>
              Looks up a localized string similar to &lt;{0}&gt; is assignable from &lt;{1}&gt;..
            </summary>
        </member>
        <member name="P:SoftwareApproach.TestingExtensions.Resources.ExceptionActualExpectedString">
            <summary>
              Looks up a localized string similar to Wrong exception was thrown. Actual:&lt;{0}&gt;. Expected&lt;{1}&gt;..
            </summary>
        </member>
        <member name="P:SoftwareApproach.TestingExtensions.Resources.ExceptionNoneThrownString">
            <summary>
              Looks up a localized string similar to No exception was thrown.  Expected&lt;(0)&gt;..
            </summary>
        </member>
        <member name="P:SoftwareApproach.TestingExtensions.Resources.NotAssignableFromString">
            <summary>
              Looks up a localized string similar to &lt;{0}&gt; is not assignable from &lt;{1}&gt;..
            </summary>
        </member>
        <member name="P:SoftwareApproach.TestingExtensions.Resources.NullString">
            <summary>
              Looks up a localized string similar to (null).
            </summary>
        </member>
        <member name="T:SoftwareApproach.TestingExtensions.AssertHelper">
            <summary>
            Contains methods to help with creating assertions.
            </summary>
        </member>
        <member name="M:SoftwareApproach.TestingExtensions.AssertHelper.AssertFailed(System.String,System.String,System.Object[])">
            <summary>
            Creates a custom <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"/> and provides information for the exception.
            </summary>
            <param name="assertionName">The name of the assertion (typically the name of the assertion method).</param>
            <param name="message">A message for the assertion.</param>
            <param name="parameters">An array of parameters to use with a formatted message.</param>
            <exception cref="T:System.ArgumentNullException"><i>assertionName</i> is null</exception>
            <exception cref="T:System.ArgumentException"><i>assertionName</i> is an empty string</exception>
        </member>
    </members>
</doc>
